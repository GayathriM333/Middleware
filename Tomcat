 Websphere To Tomcat migration process:

Servlet spec-4.0 && tomcat 9.0.x and {{latest released 9.0.105 and java supported 8 and later}}{{10.1.41 and 11 or later}}
The idea is to migrate with keeping the same level of J2EE or it could break somethings like deprecated methods etc..
- first check Java versions on both sides, probably use the same versions even they are coming from different companies(IBM,oracle).
Analyze Dependencies: Identify Java EE features used by your application, such as EJBs, JMS, JPA, or web services.Tomcat supports servlets, JSP, and basic web applications.
- check J2EE versions supported by IBM Websphere, choose tomcat accordingly.
- ...Download and install the appropriate version of Tomcat for your application’s Java version., copy your application to webapps directory.(Ensure your application package is compatible with Tomcat’s WAR structure)
- you might have some libraries to copy in lib directory(jdbc etc) -----Define context.xml files for JNDI resources, database connections, etc.
nclude necessary dependencies in the lib directory or within the application’s WEB-INF/lib folder. web.xml: Ensure the deployment descriptor matches Tomcat's requirements. Remove WebSphere-specific entries.
Convert WebSphere-specific JNDI configurations to Tomcat’s format in context.xml.
---->Resource name="jdbc/MyDB"
          auth="Container"
          type="javax.sql.DataSource"
          maxTotal="20"
          maxIdle="10"
          maxWaitMillis="-1"
          username="dbuser"
          password="dbpass"
          driverClassName="com.mysql.jdbc.Driver"
          url="jdbc:mysql://localhost:3306/mydb" />
- check tomcat logs particularly catalina.out to see the deployments result.

ISsues: clientAuth=true (it is for mutual authentication).as for keystore you supposed to use the same keystore for certificates.therefore when client connects with its cert, tomcat will validate that corresponding cert located in keystore.Use it(false) for standard HTTPS setups where client authentication is unnecessary.
(set to true if ssl stack to require a valid certificate chain from client before accepting a connection)
How It Works in Practice
When clientAuth="false":
The client initiates a connection to the server.
The server presents its SSL certificate to the client for validation.
The client validates the server’s certificate using its trusted Certificate Authority (CA) store.
The connection is established without the client providing its certificate.

server.xml: 
<Connector port="8443"
           protocol="org.apache.coyote.http11.Http11NioProtocol"
           maxThreads="200"
           SSLEnabled="true"
           keystoreFile="conf/keystore.jks"
           keystorePass="password"
           clientAuth="false"
           sslProtocol="TLS" />


-----> There is no IHS for tomcat, you will edit some files. these files should be considered(server.xml- where you define listening port, attributes, setenv.sh - place where you declare JVMoptions like Java_home, memory settings(-xms1024m-1GB) such as heap,log verbosity like printGC details...(issue xloggc got deprecated so got issue)
Tomcat upgrade - tomcat 8.5.32 to 9.0.102 --> we are basically not touching the existing setup. we are using ansible playbook to first create folder structure and install the latestversion by extracting the zip placed in jumpbox. using jinja templates of all the configuration files like server.xml,setenv.sh, catalina.properties etc and push the files content to destserver and give them file permissions.
****SSLHOSTConfig deprecated values of clientauth=false
difference between tomcat 8 and 9 : java version requirement(java8 and later for tomcat9),,tomcat9 implements servlet 4.0,jsp2.3required by javaEE8 whereas tomcat8 supports earlier version
****Integrating tomcat with Apache:
Apache HTTP Server handles static content (HTML, CSS, JS, etc.), while Tomcat processes dynamic Java-based content. This setup is typically achieved using a connector like mod_proxy or mod_jk
+
